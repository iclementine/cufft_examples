#include <iostream>
#include "cufft.h"
#include "cufftXt.h"
#include "cuda_runtime.h"
#include "unsupported/Eigen/CXX11/Tensor"

int main(){
  cufftHandle index;
  cufftResult res;
  cudaError_t ret;

  Eigen::Tensor<float, 3> y(192, 28, 107);
  y.setRandom();
  std::cout << "total elements: " << y.size() << std::endl;
  float* y_on_device = nullptr;
  
  size_t size_in_bytes = y.size() * sizeof(float);
  ret = cudaMalloc(&y_on_device, size_in_bytes);
  if (ret != cudaSuccess) {
    std::cout << "Malloc: Something Wrong: " << ret << std::endl;
    return -1;
  }
  ret = cudaMemcpy(y_on_device, y.data(), size_in_bytes, cudaMemcpyHostToDevice);
  if (ret != cudaSuccess) {
    std::cout << "Memcpy: Something Wrong: " << ret << std::endl;
    return -1;
  }

  Eigen::Tensor<float, 3> D(192, 28, 107 / 2 + 1);
  float* D_on_device = nullptr;
  size_t D_size_in_bytes = D.size() * sizeof(float);
  ret = cudaMalloc(&D_on_device, D_size_in_bytes);
  if (ret != cudaSuccess) {
    std::cout << "Malloc: Something Wrong: " << ret << std::endl;
    return -1;
  }

  // =======================cufft plan================================
  res = cufftCreate(&index);
  if (res != CUFFT_SUCCESS){
    std::cout << "Create: Something Wrong: " << res << std::endl;
    return -1;
  }

  std::vector<long long> fft_sizes(28, 107);
  size_t workspace_size = 0;
  res = cufftXtMakePlanMany(
    index, 
    2, 
    fft_sizes.data(), 
    nullptr, 
    0, 
    0, 
    CUDA_R_32F,
    nullptr,
    0, 
    0, 
    CUDA_C_32F,
    192L,
    &workspace_size,
    CUDA_C_32F);
  if (res != CUFFT_SUCCESS){
    std::cout << "MakePlan: Something Wrong: " << res <<std::endl;
    return -1;
  }

  // ============================Execution==============================
  res = cufftXtExec(index, y_on_device, D_on_device, CUFFT_FORWARD);
  if (res != CUFFT_SUCCESS){
    std::cout << "Execution: Something Wrong: " << res <<std::endl;
    return -1;
  }

  res = cufftDestroy(index);
  if (res != CUFFT_SUCCESS){
    std::cout << "Destroy: Something Wrong: " << res <<std::endl;
    return -1;
  }

  ret = cudaFree(y_on_device);
  if (ret != cudaSuccess) {
    std::cout << "Free: Something Wrong: " << ret << std::endl;
    return -1;
  }

  ret = cudaMemcpy(D.data(), D_on_device, D_size_in_bytes, cudaMemcpyDeviceToHost);
  if (ret != cudaSuccess) {
    std::cout << "Memcpy Back: Something Wrong: " << ret << std::endl;
    return -1;
  }

  return 0;
}
